#   Copyright (c) 2013-2015, University of Bern, Switzerland.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

__author__ = "Andre Gomes"
__copyright__ = "Copyright (c) 2013-2015, Mobile Cloud Networking (MCN) project"
__credits__ = ["Andre Gomes"]
__license__ = "Apache"
__version__ = "1.4"
__maintainer__ = "Andre Gomes"
__email__ = "gomes@iam.unibe.ch"
__status__ = "Production"

"""
Template Generator for ICNaaS.
Version 1.4
"""

#PUBLIC_NET_ID = 'f7a4b8a5-2916-4b84-90c5-3361b82633cc'
#PRIVATE_NET_ID = 'a5ff6407-c6f2-4be8-93f4-56bc881affdf'
#PRIVATE_SUBNET_ID = 'f9c4c719-85ce-4663-b54b-6144412c09c9'

#PUBLIC_NET_ID = 'fde9f17b-eb51-4d4b-a474-deb583d03d86'
#PRIVATE_NET_ID = 'c61a8b6a-7ab9-4021-9ebc-2403ba7f6a17'
#PRIVATE_SUBNET_ID = 'd52ec28f-cc70-4d8a-a5f6-97aa8065b02c'

PUBLIC_NET_ID = 'fde9f17b-eb51-4d4b-a474-deb583d03d86'
PRIVATE_NET_ID = '60d2837d-e5b2-4e53-ace5-a9705a9893f9'
PRIVATE_SUBNET_ID = '376e798c-9928-4263-8f84-7c2fbd1de674'

MAAS_DEFAULT_ENDPOINT = '130.92.70.142'
MOBAAS_DEFAULT_ENDPOINT = '130.92.70.134'

class ICNaaSTemplateGenerator(object):

    def __init__(self, routers = None, maas_endpoint = None, mobaas_endpoint = None):
        if routers is None:
            self.routers = { 1: { 'layer': 0, 'cell_id': 200 }, 2: { 'layer': 1, 'cell_id': 0 } }
        else:
            self.routers = routers
        if maas_endpoint is None:
            self.maas_endpoint = MAAS_DEFAULT_ENDPOINT
        else:
            self.maas_endpoint = maas_endpoint
        if mobaas_endpoint is None:
            self.mobaas_endpoint = MOBAAS_DEFAULT_ENDPOINT
        else:
            self.mobaas_endpoint = mobaas_endpoint

    def generate(self, provisioning = False, fmc = False):
        # If any of the routers was already provisioned
        prev_provisioned = False
        for i in self.routers.keys():
            if self.routers[i].get('provisioned', False):
                prev_provisioned = True
        # Build template as string
        template =  '--- \n'
        template += 'description: "YAML MCN ICNaaS Template"\n'
        template += 'heat_template_version: 2013-05-23\n'
        template += 'outputs: \n'
        for i in self.routers.keys():
            template += '  mcn.ccnx.router' + str(i) + ': \n'
            template += '    description: "IP MCN CCNx Router ' + str(i) + '"\n'
            template += '    value: \n'
            template += '      get_attr: \n'
            template += '        - CCNxRouter' + str(i) + '_floating_ip\n'
            template += '        - floating_ip_address\n'
        template += '  mcn.endpoint.icnaas: \n'
        template += '    description: "IP MCN endpoint for ICNaaS"\n'
        template += '    value: \n'
        template += '      get_attr: \n'
        template += '        - ICNManager_floating_ip\n'
        template += '        - floating_ip_address\n'
        template += 'parameters: \n'
        for i in self.routers.keys():
            template += '  cell_id_' + str(i) + ': \n'
            template += '    default: "' + str(self.routers[i]['cell_id']) + '"\n'
            template += '    description: "CCNx Router ' + str(i) + ' Cell"\n'
            template += '    type: string\n'
        template += '  key_name: \n'
        template += '    default: mcn-key\n'
        template += '    description: "Name of an existing EC2 KeyPair to enable SSH access to the instances"\n'
        template += '    type: string\n'
        for i in self.routers.keys():
            template += '  layer_' + str(i) + ': \n'
            template += '    default: "' + str(self.routers[i]['layer']) + '"\n'
            template += '    description: "CCNx Router ' + str(i) + ' Layer"\n'
            template += '    type: string\n'
        if provisioning or prev_provisioned:
            template += '  maas_ip_address: \n'
            template += '    default: "' + self.maas_endpoint + '"\n'
            template += '    description: "MaaS Instance"\n'
            template += '    type: string\n'
        if fmc and (provisioning or prev_provisioned):
            template += '  mobaas_ip_address: \n'
            template += '    default: "' + self.mobaas_endpoint + '"\n'
            template += '    description: "MOBaaS Instance"\n'
            template += '    type: string\n'
        template += '  private_net_id: \n'
        template += '    default: ' + PRIVATE_NET_ID + '\n'
        template += '    description: "ID of private network into which servers get deployed"\n'
        template += '    type: string\n'
        template += '  private_subnet_id: \n'
        template += '    default: ' + PRIVATE_SUBNET_ID + '\n'
        template += '    description: "ID of private sub network into which servers get deployed"\n'
        template += '    type: string\n'
        template += '  public_net_id: \n'
        template += '    default: ' + PUBLIC_NET_ID + '\n'
        template += '    description: "ID of public network for which floating IP addresses will be allocated"\n'
        template += '    type: string\n'
        template += 'resources: \n'
        for i in self.routers.keys():
            template += '  CCNxRouter' + str(i) + ': \n'
            template += '    depends_on: [ ICNManager ]\n'
            template += '    properties: \n'
            template += '      flavor: m1.small\n'
            template += '      image: ccn-router\n'
            template += '      key_name: \n'
            template += '        get_param: key_name\n'
            template += '      networks: \n'
            template += '        - \n'
            template += '          port: \n'
            template += '            Ref: CCNxRouter' + str(i) + '_port\n'
            template += '      user_data_format: SOFTWARE_CONFIG\n'
            template += '    type: "OS::Nova::Server"\n'
            template += '  CCNxRouter' + str(i) + '_floating_ip: \n'
            template += '    properties: \n'
            template += '      floating_network_id: \n'
            template += '        get_param: public_net_id\n'
            template += '      port_id: \n'
            template += '        Ref: CCNxRouter' + str(i) + '_port\n'
            template += '    type: "OS::Neutron::FloatingIP"\n'
            template += '  CCNxRouter' + str(i) + '_port: \n'
            template += '    properties: \n'
            template += '      fixed_ips: \n'
            template += '        - \n'
            template += '          subnet_id: \n'
            template += '            get_param: private_subnet_id\n'
            template += '      network_id: \n'
            template += '        get_param: private_net_id\n'
            template += '      replacement_policy: AUTO\n'
            template += '    type: "OS::Neutron::Port"\n'
            template += '  CCNxRouter' + str(i) + 'Deployment: \n'
            template += '    properties: \n'
            template += '      config: \n'
            template += '        get_resource: CCNxRoutersConfigDeployment\n'
            template += '      input_values: \n'
            template += '        ccnx_router_public_ip: \n'
            template += '          get_attr: \n'
            template += '            - CCNxRouter' + str(i) + '_floating_ip\n'
            template += '            - floating_ip_address\n'
            template += '        cell_id: \n'
            template += '          get_param: cell_id_' + str(i) + '\n'
            if fmc:
                template += '        fmc_manager_public_ip: \n'
                template += '          get_attr: \n'
                template += '            - FMCManager_floating_ip\n'
                template += '            - floating_ip_address\n'
            template += '        icn_manager_ip: \n'
            template += '          get_attr: \n'
            template += '            - ICNManager\n'
            template += '            - first_address\n'
            template += '        layer: \n'
            template += '          get_param: layer_' + str(i) + '\n'
            template += '      server: \n'
            template += '        get_resource: CCNxRouter' + str(i) + '\n'
            template += '    type: "OS::Heat::SoftwareDeployment"\n'
            if provisioning or self.routers[i].get('provisioned', False):
                template += '  CCNxRouter' + str(i) + 'Provisioning: \n'
                template += '    properties: \n'
                template += '      config: \n'
                template += '        get_resource: CCNxRoutersConfigProvisioning\n'
                template += '      input_values: \n'
                template += '        maas_ip: \n'
                template += '          get_param: maas_ip_address\n'
                template += '      server: \n'
                template += '        get_resource: CCNxRouter' + str(i) + '\n'
                template += '    type: "OS::Heat::SoftwareDeployment"\n'
        template += '  CCNxRoutersConfigDeployment: \n'
        template += '    properties: \n'
        template += '      config: |-\n'
        template += '          #!/bin/bash\n'
        template += '          /bin/echo "search openstacklocal novalocal" > /etc/resolv.conf\n'
        template += '          /bin/echo "nameserver 8.8.8.8" >> /etc/resolv.conf\n'
        template += '          /bin/echo "nameserver 8.8.4.4" >> /etc/resolv.conf\n'
        template += '          cd /home/centos\n'
        if fmc:
            template += '          /bin/sed -i -- "s/FMC_MONITORING=.*/FMC_MONITORING=TRUE/g" start.sh\n'
        else:
            template += '          /bin/sed -i -- "s/FMC_MONITORING=.*/FMC_MONITORING=FALSE/g" start.sh\n'
        template += '          /bin/sh start.sh\n'
        if fmc:
            template += '          /usr/bin/setsid /usr/bin/java -jar ccnserver/CCNServer.jar $fmc_manager_public_ip >/var/log/ccn/ccnserver.log 2>&1 &\n'
        template += '          /bin/sed -i -- "s/IP=.*/IP=$ccnx_router_public_ip/g" register.sh\n'
        template += '          /bin/sed -i -- "s/IP=.*/IP=$ccnx_router_public_ip/g" deregister.sh\n'
        template += '          /bin/sed -i -- "s/\[url\]/$icn_manager_ip:5000/g" register.sh\n'
        template += '          /bin/sed -i -- "s/\[url\]/$icn_manager_ip:5000/g" deregister.sh\n'
        template += '          /bin/sh register.sh $layer $cell_id\n'
        template += '      group: script\n'
        template += '      inputs: \n'
        template += '        - \n'
        template += '          name: ccnx_router_public_ip\n'
        template += '        - \n'
        template += '          name: cell_id\n'
        if fmc:
            template += '        - \n'
            template += '          name: fmc_manager_public_ip\n'
        template += '        - \n'
        template += '          name: icn_manager_ip\n'
        template += '        - \n'
        template += '          name: layer\n'
        template += '    type: "OS::Heat::SoftwareConfig"\n'
        if provisioning or prev_provisioned:
            template += '  CCNxRoutersConfigProvisioning: \n'
            template += '    properties: \n'
            template += '      config: |-\n'
            template += '          #!/bin/bash\n'
            template += '          /bin/sed -i -- "s/Server=.*/Server=$maas_ip/g" /etc/zabbix/zabbix_agentd.conf\n'
            template += '          /bin/sed -i -- "s/ServerActive=.*/ServerActive=$maas_ip/g" /etc/zabbix/zabbix_agentd.conf\n'
            template += '          /bin/systemctl restart zabbix-agent.service\n'
            template += '      group: script\n'
            template += '      inputs: \n'
            template += '        - \n'
            template += '          name: maas_ip\n'
            template += '    type: "OS::Heat::SoftwareConfig"\n'
        if fmc:
            template += '  FMCManager: \n'
            template += '    properties: \n'
            template += '      flavor: m1.medium\n'
            template += '      image: fmc-manager\n'
            template += '      key_name: \n'
            template += '        get_param: key_name\n'
            template += '      networks: \n'
            template += '        - \n'
            template += '          port: \n'
            template += '            Ref: FMCManager_port\n'
            template += '      user_data_format: SOFTWARE_CONFIG\n'
            template += '    type: "OS::Nova::Server"\n'
            template += '  FMCManager_floating_ip: \n'
            template += '    properties: \n'
            template += '      floating_network_id: \n'
            template += '        get_param: public_net_id\n'
            template += '      port_id: \n'
            template += '        Ref: FMCManager_port\n'
            template += '    type: "OS::Neutron::FloatingIP"\n'
            template += '  FMCManager_port: \n'
            template += '    properties: \n'
            template += '      fixed_ips: \n'
            template += '        - \n'
            template += '          subnet_id: \n'
            template += '            get_param: private_subnet_id\n'
            template += '      network_id: \n'
            template += '        get_param: private_net_id\n'
            template += '      replacement_policy: AUTO\n'
            template += '    type: "OS::Neutron::Port"\n'
            template += '  FMCManagerDeployment: \n'
            template += '    properties: \n'
            template += '      config: \n'
            template += '        get_resource: FMCManagerConfigDeployment\n'
            template += '      input_values: \n'
            template += '        icn_manager_ip: \n'
            template += '          get_attr: \n'
            template += '            - ICNManager\n'
            template += '            - first_address\n'
            template += '        mp_middleware_ip: \n'
            template += '          get_attr: \n'
            template += '            - MPMiddleware_floating_ip\n'
            template += '            - floating_ip_address\n'
            template += '      server: \n'
            template += '        get_resource: FMCManager\n'
            template += '    type: "OS::Heat::SoftwareDeployment"\n'
            if provisioning or prev_provisioned:
                template += '  FMCManagerProvisioning: \n'
                template += '    properties: \n'
                template += '      config: \n'
                template += '        get_resource: FMCManagerConfigProvisioning\n'
                template += '      input_values: \n'
                template += '        mobaas_ip: \n'
                template += '          get_param: mobaas_ip_address\n'
                template += '      server: \n'
                template += '        get_resource: FMCManager\n'
                template += '    type: "OS::Heat::SoftwareDeployment"\n'
            template += '  FMCManagerConfigDeployment: \n'
            template += '    properties: \n'
            template += '      config: |-\n'
            template += '          #!/bin/bash\n'
            template += '          /bin/echo "search openstacklocal novalocal" > /etc/resolv.conf\n'
            template += '          /bin/echo "nameserver 8.8.8.8" >> /etc/resolv.conf\n'
            template += '          /bin/echo "nameserver 8.8.4.4" >> /etc/resolv.conf\n'
            template += '          cd /home/ubuntu\n'
            template += '          /bin/sed -i -- "s/icnaas_ip=.*/icnaas_ip=$icn_manager_ip/g" provisioning_FMC.conf\n'
            template += '          /bin/sed -i -- "s/mp_middleware_ip=.*/mp_middleware_ip=$mp_middleware_ip/g" provisioning_FMC.conf\n'
            template += '      group: script\n'
            template += '      inputs: \n'
            template += '        - \n'
            template += '          name: icn_manager_ip\n'
            template += '        - \n'
            template += '          name: mp_middleware_ip\n'
            template += '    type: "OS::Heat::SoftwareConfig"\n'
            if provisioning or prev_provisioned:
                template += '  FMCManagerConfigProvisioning: \n'
                template += '    properties: \n'
                template += '      config: |-\n'
                template += '          #!/bin/bash\n'
                template += '          cd /home/ubuntu\n'
                template += '          /bin/sed -i -- "s/mobaas_ip=.*/mobaas_ip=$mobaas_ip/g" provisioning_FMC.conf\n'
                template += '          /usr/bin/setsid /usr/bin/python FMCManager.py >/var/log/fmc-manager.log 2>&1 &\n'
                template += '      group: script\n'
                template += '      inputs: \n'
                template += '        - \n'
                template += '          name: mobaas_ip\n'
                template += '    type: "OS::Heat::SoftwareConfig"\n'
        template += '  ICNManager: \n'
        template += '    properties: \n'
        template += '      flavor: m1.small\n'
        template += '      image: icn-manager\n'
        template += '      key_name: \n'
        template += '        get_param: key_name\n'
        template += '      networks: \n'
        template += '        - \n'
        template += '          port: \n'
        template += '            Ref: ICNManager_port\n'
        template += '      user_data: |\n'
        template += '          #!/bin/bash\n'
        template += '          /bin/echo "search openstacklocal novalocal" > /etc/resolv.conf\n'
        template += '          /bin/echo "nameserver 8.8.8.8" >> /etc/resolv.conf\n'
        template += '          /bin/echo "nameserver 8.8.4.4" >> /etc/resolv.conf\n'
        template += '          cd /home/ubuntu\n'
        template += '          /usr/bin/setsid /usr/bin/python webservice.py >/var/log/icn-manager.log 2>&1 &\n'
        template += '    type: "OS::Nova::Server"\n'
        template += '  ICNManager_floating_ip: \n'
        template += '    properties: \n'
        template += '      floating_network_id: \n'
        template += '        get_param: public_net_id\n'
        template += '      port_id: \n'
        template += '        Ref: ICNManager_port\n'
        template += '    type: "OS::Neutron::FloatingIP"\n'
        template += '  ICNManager_port: \n'
        template += '    properties: \n'
        template += '      fixed_ips: \n'
        template += '        - \n'
        template += '          subnet_id: \n'
        template += '            get_param: private_subnet_id\n'
        template += '      network_id: \n'
        template += '        get_param: private_net_id\n'
        template += '      replacement_policy: AUTO\n'
        template += '    type: "OS::Neutron::Port"\n'
        if fmc:
            template += '  MPMiddleware: \n'
            template += '    properties: \n'
            template += '      flavor: m1.small\n'
            template += '      image: mp-middleware\n'
            template += '      key_name: \n'
            template += '        get_param: key_name\n'
            template += '      networks: \n'
            template += '        - \n'
            template += '          port: \n'
            template += '            Ref: MPMiddleware_port\n'
            template += '      user_data: \n'
            template += '        str_replace: \n'
            template += '          params: \n'
            template += '            $fmc_manager_ip: \n'
            template += '               get_attr: \n'
            template += '                 - FMCManager\n'
            template += '                 - first_address\n'
            template += '          template: |\n'
            template += '              #!/bin/bash\n'
            template += '              /bin/echo "search openstacklocal novalocal" > /etc/resolv.conf\n'
            template += '              /bin/echo "nameserver 8.8.8.8" >> /etc/resolv.conf\n'
            template += '              /bin/echo "nameserver 8.8.4.4" >> /etc/resolv.conf\n'
            template += '              cd /home/ubuntu\n'
            template += '              /bin/sed -i -- "s/fmc_ip=.*/fmc_ip=$fmc_manager_ip/g" provisioning_MPM.conf\n'
            template += '              /usr/bin/setsid /usr/bin/python mp_middleware.py >/var/log/mp-middleware.log 2>&1 &\n'
            template += '    type: "OS::Nova::Server"\n'
            template += '  MPMiddleware_floating_ip: \n'
            template += '    properties: \n'
            template += '      floating_network_id: \n'
            template += '        get_param: public_net_id\n'
            template += '      port_id: \n'
            template += '        Ref: MPMiddleware_port\n'
            template += '    type: "OS::Neutron::FloatingIP"\n'
            template += '  MPMiddleware_port: \n'
            template += '    properties: \n'
            template += '      fixed_ips: \n'
            template += '        - \n'
            template += '          subnet_id: \n'
            template += '            get_param: private_subnet_id\n'
            template += '      network_id: \n'
            template += '        get_param: private_net_id\n'
            template += '      replacement_policy: AUTO\n'
            template += '    type: "OS::Neutron::Port"\n'

        return template
