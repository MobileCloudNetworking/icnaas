#!/usr/bin/python

#   Copyright (c) 2013-2015, Intel Performance Learning Solutions Ltd, Intel Corporation.
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.


import os

try:
    virtenv = os.environ.get('OPENSHIFT_PYTHON_DIR', '.') + '/virtenv/'
    virtualenv = os.path.join(virtenv, 'bin/activate_this.py')
    execfile(virtualenv, dict(__file__=virtualenv))
except IOError:
    pass
#
# IMPORTANT: Put any additional includes below this line.  If placed above this
# line, it's possible required libraries won't be in your searchable path
#

import so

from sdk.mcn import occi_ext


class MyBackend(occi_ext.Backend):

    def create(self, entity, extras):
        token = extras['token']
        tenant = extras['tenant_name']
        self.so = so.ServiceOrchestrator(token, tenant)
        self.so.so_e.design()
        entity.actions = [occi_ext.DEPLOY_ACTION]

    def retrieve(self, entity, extras):
        if occi_ext.DEPLOY_ACTION in entity.actions:
            entity.attributes['occi.mcn.stack.state'] = 'uninitialized'
            entity.attributes['occi.mcn.stack.id'] = 'N/A'
        else:
            state, stack_id, stack_output = self.so.so_e.state()
            entity.attributes['occi.mcn.stack.state'] = state
            entity.attributes['occi.mcn.stack.id'] = stack_id
            if stack_output is not None:
                for kv in stack_output:
                    entity.attributes[kv['output_key']] = kv['output_value']

    def update(self, old, new, extras):
        # TODO: attributes would need to be defined by a mixin.
        #old.attributes.update(new.attributes)
        self.so.so_e.update(True, new.attributes)

    def delete(self, entity, extras):
        self.so.so_e.dispose()

    # Actions
    def deploy_me(self, entity, attributes, extras):
        self.so.so_e.deploy(attributes)
        entity.actions = [occi_ext.PROVISION_ACTION]

    def provision_me(self, entity, attributes, extras):
        self.so.so_e.provision(attributes)
        entity.actions = []

application = occi_ext.Application(MyBackend())

if __name__ == '__main__':
    from wsgiref.simple_server import make_server
    # OpSV3 needs process to listen on a public interface, use 0.0.0.0
    # no effect with OpSV2
    httpd = make_server('0.0.0.0', 8080, application)
    # Wait for a single request, serve it and quit.
    httpd.serve_forever()
    