# exttests/test_checked_startwrite
# 
# Part of the CCNx distribution.
#
# Copyright (C) 2013 Palo Alto Research Center, Inc.
#
# This work is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License version 2 as published by the
# Free Software Foundation.
# This work is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.
#
AFTER : test_single_ccnd_teardown
BEFORE : test_alone

# This tests the checked start-write command to the repository.
# http://www.ccnx.org/releases/latest/doc/technical/RepoProtocol.html

# Use a unique name for our tests.
UNIQ=`GenSym`
PREFIX=ccnx:/test-sw-c/$UNIQ

# Make a nice, clean, repo directories, but keep any keys
rm -rf sw-c/repo* sw-c/index sw-c/config
mkdir -p sw-c
rm -rf sw-c-2/repo* sw-c-2/index sw-c-2/config
mkdir -p sw-c-2

# Start ccnr with no ccnd to init the new repos
WithCCND 4 env CCNR_DIRECTORY=sw-c ccnr
WithCCND 4 env CCNR_DIRECTORY=sw-c-2 ccnr

# Start a test ccnd, and set its logging at medium
WithCCND 4 CappedCCNDStart 100
WithCCND 4 ccndlogging med

# Start a repo to capture the segments
WithCCND 4 env CCNR_DEBUG=FINEST CCNR_DIRECTORY=sw-c ccnr 2>ccnr4.out &

# Write an object consisting of a few segments
I=0; while [ $((I)) -lt 8 ]; do echo segment$I; I=$((I+1)); done |
  WithCCND 4 ccnseqwriter -b 9 -r -s 1 $PREFIX

# Make a cob without segmentation
echo unsegmented | WithCCND 4 ccnpoke ccnx:/test-sw-c/unsegmented/$UNIQ &
WithCCND 4 ccnpeek ccnx:/test-sw-c/unsegmented/$UNIQ > unsegmented.ccnb
USDIGEST=`openssl dgst -sha256 unsegmented.ccnb | sed -e 's/^.*=[ ]*//'`
[ -z "$USDIGEST" ] && SkipTest unsegmented.ccnb indigestable
# Stop ccnd and ccnr
WithCCND 4 ccndstop
wait

# Make sure that we got the expected number of segments.
# Note - ccnseqwriter sometimes makes an empty segment at the end, so allow 9.
NSEG=`ccnnamelist sw-c/repoFile1 | grep -c $PREFIX/`
[ $((NSEG)) -eq 8 -o $((NSEG)) -eq 9 ] || \
  SkipTest expecting 8 or 9 segments, but got $((NSEG)).

# Split repo file into individual pieces
ccn_splitccnb sw-c/repoFile1

# Construct a checked start-write request for an intermediate segment
grep content_to.\*`ccnnamelist sw-c/repoFile1-00004.ccnb` ccnd4-capped-100.out|\
  cut -d ' ' -f 6 > sw-c-name.out
PART1=`cut -d / -f 1-4 < sw-c-name.out` # prefix plus version
PART2=%C1.R.sw-c                        # command marker
PART3=%C1.N%00`GenSym`                  # nonce component
PART4=`cut -d / -f 5 < sw-c-name.out`   # segment
PART5=`cut -d / -f 6 < sw-c-name.out`   # digest
SWCR=$PART1/$PART2/$PART3/$PART4/$PART5
echo SWCR is $SWCR

# Start a new ccnd, and a new, empty, repo.
WithCCND 5 CappedCCNDStart 100
WithCCND 5 ccndlogging med
WithCCND 5 env CCNR_DEBUG=FINEST CCNR_DIRECTORY=sw-c-2 ccnr 2>ccnr5.out &

# Prep to store just some of the segments.
WithCCND 5 ccnlibtest -v sw-c/repoFile1-*.ccnb prefix $PART1 run 2000 mincob 4 maxcob 4 > sw-c-libtest.out &
PID=$!
# Issue the request, save the response.
WithCCND 5 ccnpeek -c $SWCR > sw-c.ccnb || Fail no reply to $SWCR

# Check for info response
ccn_ccnbtoxml sw-c.ccnb | grep INFO >/dev/null || Fail expected INFO response

# We should be doing the partial save. In the meantime, make a new save command
SWCR=$PART1/$PART2/%C1.N%00`GenSym`/$PART4/$PART5
echo SWCR is now $SWCR

wait $PID || echo Status from wait $PID is $?

# See if we have the expected pieces
ccnnamelist sw-c-2/repoFile1 > sw-c-2.names.out
WANT=$((NSEG-3))
NSEG=`grep -c $PREFIX/ sw-c-2.names.out`
[ $((NSEG)) -eq $((WANT)) ] || Fail expecting $((WANT)) segments, got $((NSEG)).
NAME=`ccnnamelist sw-c/repoFile1-00004.ccnb`
grep \^$NAME\$ sw-c-2.names.out >/dev/null || Fail did not store $NAME
NAME=`ccnnamelist sw-c/repoFile1-00003.ccnb`
grep \^$NAME\$ sw-c-2.names.out >/dev/null && Fail oops, stored $NAME

# Now we need to do it again, but this time it should be there
WithCCND 5 ccnpeek -c $SWCR > sw-c-2.ccnb || Fail no reply to $SWCR
# Check for status response
ccn_ccnbtoxml sw-c-2.ccnb | grep DATA >/dev/null || Fail expected DATA response

# Next comes the test for unsegmented data.
WithCCND 5 ccnlibtest unsegmented.ccnb prefix ccnx:/test-sw-c/unsegmented run 2000 maxcob 0 &
PID=$!
SWCR=ccnx:/test-sw-c/unsegmented/%C1.R.sw-c/%C1.N%00`GenSym`/$UNIQ/=$USDIGEST
echo SWCR is now $SWCR
WithCCND 5 ccnpeek -c $SWCR > sw-c-us.ccnb || Fail no reply to $SWCR
wait $PID || echo Status from wait $PID for ccnlibtest unsegmented.ccnb ... is $?
ccnnamelist sw-c-2/repoFile1 > sw-c-2.names.out
NAME=`ccnnamelist unsegmented.ccnb`
grep \^$NAME\$ sw-c-2.names.out >/dev/null || Fail did not store $NAME

# Stop ccnd and ccnr
WithCCND 5 ccndstop
wait
